*{
margin: 0px;
padding: 0px;
}
/*created  css style sheet with padding and margin as =0px, The main reason this is used is because sometimes the browser will apply it's default margin/padding to elements, and in a case where you do not want there to be any margin or padding space around an element you will want to define that there is no margin or padding.*/
body {
	font-family: "Poppin", sans-serif;
	background-color: #e5e9ea;
	height: 100vh;
	display: flex;
	align-items: center;
	justify-content: center;
}/*styled the body of the web created with bg clr-white , specifying height and importantly making display to flex to justify and align them in center. Flexbox is a Layout Module, makes it easier to design flexible responsive layout structure without using float or positioning.*/

.book {
	width: 350px;
	height: 450px;
	position: relative;
	transition-duration: 1s;
	perspective: 1500;
} /* width, height is applied for customisation of certain properties over required items for desired changes. here postion is : relative. tarnsition are controlled using the shorthand transition property. This is the best way to configure transitions, as it makes it easier to avoid out of sync parameters, which can be very frustrating to have to spend lots of time debugging in CSS.*/
input {
	display: none; /*display CSS property sets whether an element is treated as a block or inline box and the layout used for its children, such as flow layout, grid or flex. when none of them are used, we use none*/
} /*adding css to cover and back cover with desired bg clr= yellow, adding shadow to add depth to the book and give visual effects, making it flex gives various opts for customisation*/
.cover, .back-cover {
	background-color: #dcc026;
	width: 100%;
	height: 100%;
	border-radius: 0 15px 15px 0;
	box-shadow: 0 0 5px rgb(108, 108, 108);
	display: flex;
	align-items: center;
	justify-content: center;
	transform-origin: center left;
}
.cover {
	position: absolute;
	z-index: 4; /*the z-index sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.*/
	transition: transform 1s;
}
.cover label {
	width: 100%;
	height: 100%;
	cursor: pointer; /*cursor which looks as an arrow to pointer that allows users to interact through clicks */
}

.para{

/* text-align: center; */
display: flex;
justify-content: center;
align-items: center;
padding-top: 15%;
font-size: 40px;
}
.page {
	position: absolute;
	background-color: white;
	width: 330px;
	height: 435px;
	border-radius: 0 15px 15px 0;
	margin-top: 10px;
	transform-origin: left; /*tranform s and annimations are effective in css. here we use transform property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.*/
	transform-style: preserve-3d; /*tells us on how nested elements are rendered in 3D space.*/
	transform: rotateY(10deg); /*A two-dimensional transformation is applied to an element through the 'transform' property. */
	transition-duration: 1.5s;/*Specifies how long the transition from the old value to the new value should take.*/
}

.front-page {
	position: absolute;
	width: 100%;
	height: 100%;
	backface-visibility: hidden;/*Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.*/
	box-sizing: border-box;/*Specifies the behavior of the 'width' and 'height' properties.*/
	padding: 1rem;
    cursor: pointer;/*Allows control over cursor appearance in an element*/
    /* transition: transform 1s; */

}

.page img {
    margin-bottom: auto;/*the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..*/
	width: 100%;
	height: 100%;
	border-radius: 15px 0 0 15px;
}


.next, .prev {
	position: absolute;/*sets how an element is positioned */
	bottom: 1em;
	cursor: pointer;
}
.next {
	right: 1em;
}
.prev {
	left: 1em;
}

#page1 {
	z-index: 3;
}
#page2 {
	z-index: 2;
}
#page3 {
	z-index: 1;
}
#checkbox-cover:checked ~ .book {
	transform: translateX(200px);
}
#checkbox-cover:checked ~ .book .cover {
	transition: transform 1.5s, z-index 0.5s 0.5s;
	transform: rotateY(-180deg);
	z-index: 1;
}
#checkbox-cover:checked ~ .book .page {
	box-shadow: 0 0 3px rgb(99, 98, 98);
}
#checkbox-page1:checked ~ .book #page1 {
	transform: rotateY(-180deg);
	z-index: 2;
}
#checkbox-page2:checked ~ .book #page2 {
	transform: rotateY(-180deg);
	z-index: 2;
}
#checkbox-page3:checked ~ .book #page3 {
	transform: rotateY(-180deg);
	z-index: 2;
}

